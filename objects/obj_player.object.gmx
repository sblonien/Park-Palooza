<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_male_stand_empty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player varaibles

//Remmber the player's ID so other object can access player variables
global.player_id = id;

//Set sprite indexes for play states
image_speed = 6/room_speed;
if(global.gender == 0) {
    player_standing_empty = spr_player_male_stand_empty;
    player_standing_left = spr_player_male_stand_left;
    player_standing_both = spr_player_male_stand_both;
    player_walking_empty_lateral = spr_player_male_walk_lateral_empty;
    player_walking_empty_north = spr_player_male_walk_north_empty;
    player_walking_empty_south = spr_player_male_walk_south_empty;
    player_walking_left_lateral = spr_player_male_walk_lateral_left;
    player_walking_left_north = spr_player_male_walk_north_left;
    player_walking_left_south = spr_player_male_walk_south_left;
    player_walking_both_lateral = spr_player_male_walk_lateral_both;
    player_walking_both_north = spr_player_male_walk_north_both;
    player_walking_both_south = spr_player_male_walk_south_both;
} else {
    player_standing_empty = spr_player_female_stand_empty;
    player_standing_left = spr_player_female_stand_left;
    player_standing_both = spr_player_female_stand_both;
    player_walking_empty_lateral = spr_player_female_walk_lateral_empty;
    player_walking_empty_north = spr_player_female_walk_north_empty;
    player_walking_empty_south = spr_palyer_female_walk_south_empty;
    player_walking_left_lateral = spr_player_female_walk_lateral_left;
    player_walking_left_north = spr_player_female_walk_north_left;
    player_walking_left_south = spr_player_female_walk_south_left;
    player_walking_both_lateral = spr_player_female_walk_lateral_both;
    player_walking_both_north = spr_player_female_walk_north_both;
    player_walking_both_south = spr_player_female_walk_south_both;
}
//Speed at which player walks through the room
player_speed = 8;

//Player can only navigate to next object if false
is_moving = false;

//Allocate memory to save the ID of the object that the player is currently moving towards
destination_object = noone;

//Array of what player is holding.
// 0 = empty hand
// 1 = ID to give to cart
// 2 = game to bring to patrons
// 3 = game to return to cart
// 4 = ID to bring to patrons
hands[0] = 0;
hands[1] = 0;

//Carries ID of the table
hands_number[0] = 0;
hands_number[1] = 0;

//Used to prevent looping while stationary at an object that the player can interact with
can_execute = true;

picked_up_patron = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player's movement grid/system initialization

//Set up the player's grid/movement system
player_preciscion = 3;
global.map_grid = mp_grid_create(0, 0, 42, 24, 32, 32);
global.navigate = path_add();
mp_grid_add_instances(global.map_grid, obj_table_seated, false);
mp_grid_add_instances(global.map_grid, obj_table_empty, false);
mp_grid_add_instances(global.map_grid, obj_cart, false);
mp_grid_add_instances(global.map_grid, obj_counter, false);
//Create the player's movements queue
global.player_queue = ds_queue_create(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy dynamic memory
mp_grid_destroy(map_grid);
ds_queue_destroy(global.player_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for interactions; navigate to next object

//If at exact beggining or exact end of path
if(path_position == 1 || path_position == 0) {
    //If there was a destination dequeued last step and hasn't already performed an action
    if(destination_object &amp;&amp; can_execute) {
        //Prevent the player from checking for an action until a new path is made
        can_execute = false;
        
        //Setup a switch to determine what object the player arrives at
        switch(destination_object.object_index) {
            //Check to see if object is seated table
            case obj_table_seated:
                //If the table is waiting
                if(destination_object.is_waiting) {
                    //If the table has an ID
                    if(destination_object.table_state == 1) {
                        //Check which hands are empty
                        //If hand one is empty
                        if(hands[0] == 0) {
                            //Fill hand one with ID
                            hands[0] = 1;
                            //Record the table number of the ID
                            hands_number[0] = destination_object.table_number;
                            //With table
                            with(destination_object) {
                                //Change the table state
                                table_state++;
                                with(patron_id) {
                                    patron_state = 3;
                                    scr_points(id, 2);
                                }
                            }
                        // Else if hand two is empty
                        } else if (hands[0] != 0 &amp;&amp; hands[1] == 0) {
                            //Fill hand one with ID
                            hands[1] = 1;
                            //Record the table number of the ID
                            hands_number[1] = destination_object.table_number;
                            with(destination_object) {
                                table_state++;
                                with(patron_id) {
                                    patron_state = 3;
                                    scr_points(id, 2);
                                }
                            }
                        // Else if both hands are full, play error sound
                        } else if(hands[0] != 0 &amp;&amp; hands[1] != 0) {
                            //No hand space
                            scr_play_sound(s_meep_merp);
                        }
                    //If waiting on game
                    } else if(destination_object.table_state == 2) {
                        //Check what hand game is in
                        if(hands[0] == 2 &amp;&amp; hands_number[0] == destination_object.table_number) {
                            //Check if game in hand matches table number
                                //Empty the hand
                                hands[0] = 0;
                                hands_number[0] = 0;
                                with(destination_object) {
                                    table_state = 3;
                                    with(patron_id) {
                                        patron_state = 4;
                                        alarm[3] = room_speed * playing_game_time;
                                        scr_play_sound(s_playing_game);
                                        scr_points(id, 3);
                                    }
                                }
                        } else if(hands[1] == 2 &amp;&amp; hands_number[1] == destination_object.table_number) {
                            //Check if game in hand matches table number
                                //Empty the hand
                                hands[1] = 0;
                                hands_number[1] = 0;
                                with(destination_object) {
                                    table_state = 3;
                                    with(patron_id) {
                                        patron_state = 4;
                                        alarm[3] = room_speed * playing_game_time;
                                        scr_play_sound(s_playing_game);
                                        scr_points(id, 3);
                                    }
                                }
                            
                        } else {
                            
                        }
                    //If finished with game
                    } else if(destination_object.table_state == 4) {
                        //Check which hands are empty
                        if(hands[0] == 0) {
                            hands[0] = 3;
                            hands_number[0] = destination_object.table_number;
                            with(destination_object) {
                                table_state = 5;
                                with(patron_id) {
                                    patron_state = 3;
                                    scr_points(id, 4);
                                }
                            }
                        } else if (hands[1] == 0) {
                            hands[1] = 3;
                            hands_number[1] = destination_object.table_number;
                            with(destination_object) {
                                table_state = 5;
                                with(patron_id) {
                                    patron_state = 3;
                                    scr_points(id, 4);
                                }
                            }
                        }
                    //If waiting on ID to leave
                    } else if(destination_object.table_state == 5) {
                        if(!destination_object.patron_id.leaving) {
                            //Check which hands have the ID
                            if(hands[0] == 4) {
                                hands[0] = 0;
                                with(destination_object.patron_id) {
                                    alarm[2] = room_speed * 1;
                                    scr_play_sound(snd_leave_happy);
                                    leaving = true;
                                    scr_points(id, 5);
                                }
                            } else if (hands[1] == 4) {
                                hands[1] = 0;
                                with(destination_object.patron_id) {
                                    alarm[2] = room_speed * 1;
                                    scr_play_sound(snd_leave_happy);
                                    leaving = true;
                                    scr_points(id, 5);
                                }
                            }
                        }
                    }
                }
                break;
            case obj_cart:
                //Check if hands have ID
                if(hands[0] == 1) {
                    //Queue ID to cart 
                    ds_list_add(destination_object.queue_1, hands_number[0]);
                    //Remove ID from hands
                    hands[0] = 0;
                    hands_number[0] = 0;
                } 
                if(hands[1] == 1) {
                    //Queue ID to cart 
                    ds_list_add(destination_object.queue_1, hands_number[1]);
                    //Remove ID from hands
                    hands[1] = 0;
                    hands_number[1] = 0;
                }
                if(hands[0] == 3) {
                    //Give generic ID in exchange for game
                    hands[0] = 4;
                    scr_play_sound(s_tiny_pop);
                }
                if(hands[1] == 3) {
                    //Give generic ID in exchange for game
                    hands[1] = 4;
                    scr_play_sound(s_tiny_pop);
                }
                break;
            case obj_counter:
                if(destination_object.val != -1) {
                    //Check which hands are empty
                    if(hands[0] == 0){
                        hands[0] = 2;
                        hands_number[0] = destination_object.val;
                        //Reset val 
                        destination_object.val = -1;
                    } else if(hands[1] == 0) {
                        hands[1] = 2;
                        hands_number[1] = destination_object.val;
                        //Reset val 
                        destination_object.val = -1;
                    }
                }
                break;
            default: 
                break;
        }
        //End of switch
        //Flag table out of queue
        destination_object.in_queue = false;
    }
    //Reset so table just in case if queue is empty
    //destination_object = noone;
    
    //Make sure is_moving is false for navigate script or if standing
    is_moving = false;
    
    //If player queue is not empty, navigate to next object (coordinates vary)
    if(!ds_queue_empty(global.player_queue))
    {
        //Dequeue next place
        destination_object = ds_queue_dequeue(global.player_queue);
        
        // If table, navigate to table
        if(destination_object.object_index == obj_table_empty || destination_object.object_index == obj_table_seated){
            scr_nav(x, y, destination_object.x, destination_object.y - (sprite_get_yoffset(destination_object.sprite_index) + (sprite_height/2) - 15));
        }
        // If cart, navigate to cart
        if(destination_object.object_index == obj_cart){
            scr_nav(x, y, destination_object.x, destination_object.y + (sprite_get_yoffset(destination_object.sprite_index) + (sprite_height/2)) + 30);
        }
        // If counter, navigate to counter
        if(destination_object.object_index == obj_counter) {
            scr_nav(x, y, destination_object.x, destination_object.y + (sprite_get_yoffset(destination_object.sprite_index) + (sprite_height/2)) - 10);
        }
    }
} else
// Else player is moving
{
    is_moving = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add objects to the player's movement queue

//If player clicks
if(mouse_check_button_pressed(mb_left))
{
    /* If else and click_id for each object interaction. */

    var click_id = noone; 
    //Check if empty table was clicked
    click_id = instance_position(mouse_x,mouse_y,obj_table_seated);
    //If table detected, queue that table
    if(click_id) {
        ds_queue_enqueue(global.player_queue, click_id); 
        click_id.in_queue = true;
        scr_play_sound(s_woosh);
    } else {
        //Check if seated table was clicked
        click_id = instance_position(mouse_x,mouse_y,obj_table_empty);
        //If table detected, queue that table
        if(click_id) {
            ds_queue_enqueue(global.player_queue, click_id);
            click_id.in_queue = true;
            scr_play_sound(s_woosh);
        } else {
            //Check if cart was clicked
            click_id = instance_position(mouse_x,mouse_y,obj_cart);
            //If cart detected, queue that cart
            if(click_id) {
                ds_queue_enqueue(global.player_queue, click_id);
                click_id.in_queue = true;
                scr_play_sound(s_woosh);
            } else {
                //Check if counter was clicked
                click_id = instance_position(mouse_x,mouse_y,obj_counter);
                //If counter detected, queue that counter
                if(click_id) {
                    ds_queue_enqueue(global.player_queue, click_id);
                    click_id.in_queue = true;
                    scr_play_sound(s_woosh);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player sprites (movement and hands)

//If the player is moving
if(is_moving) {
    //0 = right
    //90 = north
    //180 = left
    //270 = south
    
    //== Lateral Right ==
    if((direction &gt;= 0 &amp;&amp; direction &lt; 45) || (direction &gt;= 315 &amp;&amp; direction &lt; 360)) {
        //If player's left hand is empty
        if(hands[0] == 0) {
            //If there is nothing in right hand too, set empty sprite
            if(hands[1] == 0) sprite_index = player_walking_empty_lateral;
            //Else put right hand object into left hand
            else {
                hands[0] = hands[1];
                hands_number[0] = hands_number[1];
                hands[1] = 0;
                hands_number[1] = 0;
                sprite_index = player_walking_left_lateral;
            }
        //Else if left hand is full
        }  else { 
            //If right hand is empty, only show left hand
            if(hands[1] == 0) {
                sprite_index = player_walking_left_lateral;
            //Else show both hands
            } else {
                sprite_index = player_walking_both_lateral;
            }
        }
        image_xscale = 1;
    //== North == 
    } else if (direction &gt;= 45 &amp;&amp; direction &lt; 135) {
        //If player's left hand is empty
        if(hands[0] == 0) {
            //If there is nothing in right hand too, set empty sprite
            if(hands[1] == 0) sprite_index = player_walking_empty_north;
            //Else put right hand object into left hand
            else {
                hands[0] = hands[1];
                hands_number[0] = hands_number[1];
                hands[1] = 0;
                hands_number[1] = 0;
                sprite_index = player_walking_left_north;
            }
        //Else if left hand is full
        }  else { 
            //If right hand is empty, only show left hand
            if(hands[1] == 0) {
                sprite_index = player_walking_left_north;
            //Else show both hands
            } else {
                sprite_index = player_walking_both_north;
            }
        }
    //== Lateral Left == 
    } else if (direction &gt;= 135 &amp;&amp; direction &lt; 225) {
        //If player's left hand is empty
        if(hands[0] == 0) {
            //If there is nothing in right hand too, set empty sprite
            if(hands[1] == 0) sprite_index = player_walking_empty_lateral;
            //Else put right hand object into left hand
            else {
                hands[0] = hands[1];
                hands_number[0] = hands_number[1];
                hands[1] = 0;
                hands_number[1] = 0;
                sprite_index = player_walking_left_lateral;
            }
        //Else if left hand is full
        }  else { 
            //If right hand is empty, only show left hand
            if(hands[1] == 0) {
                sprite_index = player_walking_left_lateral;
            //Else show both hands
            } else {
                sprite_index = player_walking_both_lateral;
            }
        }
        //Flip sprite for the left direction
        image_xscale = -1;
    //== South == 
    } else if (direction &gt;= 225 &amp;&amp; direction &lt; 315) {
        //If player's left hand is empty
        if(hands[0] == 0) {
            //If there is nothing in right hand too, set empty sprite
            if(hands[1] == 0) sprite_index = player_walking_empty_south;
            //Else put right hand object into left hand
            else {
                hands[0] = hands[1];
                hands_number[0] = hands_number[1];
                hands[1] = 0;
                hands_number[1] = 0;
                sprite_index = player_walking_left_south;
            }
        //Else if left hand is full
        }  else { 
            //If right hand is empty, only show left hand
            if(hands[1] == 0) {
                sprite_index = player_walking_left_south;
            //Else show both hands
            } else {
                sprite_index = player_walking_both_south;
            }
        }
    }
//Else the player is stopped and standing 
} else {
    //If player's left hand is empty
    if(hands[0] == 0) {
        //If there is nothing in right hand too, set empty sprite
        if(hands[1] ==0) sprite_index = player_standing_empty;
        //Else put right hand object into left hand
        else {
            hands[0] = hands[1];
            hands_number[0] = hands_number[1];
            hands[1] = 0;
            hands_number[1] = 0;
        }
    //Else if left hand is full
    }  else { 
        //If right hand is empty, only show left hand
        if(hands[1] == 0) {
            sprite_index = player_standing_left;
        //Else show both hands
        } else {
            sprite_index = player_standing_both;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player and items in hands

scr_draw_shadow();

//Set font and color to draw number on game in hands
draw_set_font(game_font);
draw_set_color(c_black);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

var y_val_offset = y-3;
var x_offset = (sprite_width/2);

//If left hand is not empty
if(hands[0] != 0) {
    //Draw the sprite for the player's hands
    draw_sprite(spr_hands_item, hands[0], x - (sprite_width/2), y+2);
    //If game, draw number of game on top of the game
    if(hands[0] == 2 || hands[0] == 3) {
        draw_text(x - x_offset, y_val_offset, string(hands_number[0]));
    }
}

//If right hand is not empty
if(hands[1] != 0) { 
    //Draw the sprite for the player's hands
    draw_sprite(spr_hands_item, hands[1], x + (sprite_width/2), y+2);
    //If game, draw number of game on top of the game
    if(hands[1] == 2 || hands[1] == 3) {
        draw_text(x + x_offset, y_val_offset, string(hands_number[1]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player's movement grid

/*
draw_set_alpha(0.5);
mp_grid_draw(global.map_grid);
draw_set_alpha(1);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
