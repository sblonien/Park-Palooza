<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_table</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_table_empty</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize table variables

event_inherited();

//Record number of patrons seated
num_seated = 0;
//Set depth (patron will appear above table)
depth = -4;
//Boolean used to check if an interaction can be made with the player and the table
is_waiting = false;
//Variable that will remember patron ID once the patron sits, useful for accessing
//the patrons variables.
patron_id = noone;

//0 = deciding on game
//1 = waiting to give ID
//2 = waiting to receive game
//3 = playing game
//4 = finished with game
//5 = waiting on ID to be returned
table_state = 0;
//Set the the sprite for the table items
table_items = spr_table_items;

//Used to distinguish tables from eachother. Number is written on table
//to show the player which table requires which game.
table_number = 0;

//Used when checking if the patron still has a game out (see patron alarm[2])
found_game = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shadow, self, and stuff on table
scr_draw_shadow();

//Draw the items on the table according to its state.
//Items will be nothing, ID, game board, or game box
draw_sprite(table_items,table_state, x,y-60);

//If table state has the game box, draw the table number on the box
draw_set_color(c_black);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
if (table_state == 4) {
    draw_set_font(game_font);
    draw_text(x, y-65, string(table_number));
} else if(table_state == 2) {
    draw_set_font(Pixel);
    draw_text(x, y-40, string(table_number));
}

//If in player queue, draw check
scr_draw_check(x,y-40);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
