<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cart_empty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_destination_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
event_inherited();

global.cart_id = id;

img_speed = 0.29;
can_draw_standing = true;
moving_subimage = 0;

id_count = 0;
can_queue_1 = true;
queue_1 = ds_list_create();
queue_2 = ds_list_create();
queue_3 = ds_list_create();

counter_left = instance_create(x+150, y+79, obj_counter);
counter_middle = instance_create(x+198, y+79, obj_counter);
counter_right = instance_create(x+247, y+79, obj_counter);

counter_left.sprite_index = spr_table_6_left;
counter_middle.sprite_index = spr_table_6_middle;
counter_right.sprite_index = spr_table_6_right;

game_create_speed = 1.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free dynamic memory
ds_queue_destroy(queue_1);
ds_queue_destroy(queue_2);
ds_queue_destroy(queue_3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game create alarm
var val = ds_list_find_value(queue_2, 0);
ds_list_delete(queue_2, 0);
ds_list_add(queue_3, val);
can_draw_standing = true;

can_queue_1 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm queue
if(can_queue_1) {
    //If there is a value to dequeue
    if(!ds_list_empty(queue_1)) {
        var value = ds_list_find_value(queue_1, 0);
        ds_list_delete(queue_1, 0);
        ds_list_add(queue_2, value);
        alarm[0] = room_speed * game_create_speed;
        can_draw_standing = false
        moving_subimage = 0;
        moving_subimage_counter = 0;
        id_count++;
        can_queue_1 = false;
        scr_play_sound(s_shuffle);
    } 
}

//Check if can display a game on the 6ft table
if(!ds_list_empty(queue_3)) {
    if(counter_left.val == -1) {
        counter_left.val = ds_list_find_value(queue_3, 0);
        ds_list_delete(queue_3, 0);
        scr_play_sound(s_tick);
    } else if (counter_middle.val == -1) {
        counter_middle.val = ds_list_find_value(queue_3, 0);
        ds_list_delete(queue_3, 0);
        scr_play_sound(s_tick);
    } else if (counter_right.val == -1) {
        counter_right.val = ds_list_find_value(queue_3, 0);
        ds_list_delete(queue_3, 0);
        scr_play_sound(s_tick);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self, shadow, game create, check
script_execute(scr_draw_shadow);

//If game is not being created, draw normal, standing sprite
if(can_draw_standing) draw_sprite(spr_cart_standing, 0, x, y);
//Else draw the moving animation for 19 steps.
//Then switch to standing sprite after finished
else {
    draw_sprite(spr_cart_moving, moving_subimage, x, y);
    moving_subimage += img_speed;
    if(moving_subimage &gt;= 19) { 
        can_drawing_standing = true;
        moving_subimage = 0;
    }
} 

//Draw_check
scr_draw_check(x + 20,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
