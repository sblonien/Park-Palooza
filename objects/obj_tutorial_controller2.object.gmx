<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tutorial_text_box</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

x = room_width/2;
y = room_height;

text_counter = 0;

textx = room_width/2;
texty = 620;

text = noone;
text_previous1 = noone;
text_previous2 = noone;

//State used for the skip event
state = noone;

hands_prev = noone;

can_take_id = false;
can_check_for_game = false;
can_pickup_game = false;
can_deliver_game = false;
can_return_game = false;
can_return_id = false;

current_radio_sound = noone;

//Counter used in the draw event for the radio sound waves
radio_img_counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text 11 part 2

text_previous1 = text;

text = scr_text("game and return it to the cart.", textx, texty+30, Pixel, c_black);

//Change state used for the skip event
state = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text 11 part 1


with text instance_destroy(); 
with text_previous1 instance_destroy(); 

text = scr_text("The patron is finished. Now pick up the", textx, texty, Pixel, c_black);

alarm[3] = room_speed * 1.7;
can_return_game = true;
with(obj_cart) image_index = 1;

//Change state used for the skip event
state = 19;

scr_play_sound(s_glow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text 10 part 2

text_previous1 = text;

text = scr_text("finish playing.", textx, texty+30, Pixel, c_black);

alarm[2] = room_speed * 5.3;

//Change state used for the skip event
state = 18;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text 8 part 2 (game on counter)

text_previous1 = text;

text = scr_text("Pick up the game at the counter.", textx, texty+30, Pixel, c_black);

//Change state used for the skip event
state = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if under certain state, if an event occured

if(can_take_id) {
    if(global.player_id.hands[0] == 1) {
        can_take_id = false;
        with text instance_destroy();
        text = scr_text("Deliver the ID to the game cart.", textx, texty, Pixel, c_black);
        can_check_for_game = true;
        with(obj_cart) image_index = 1;
        scr_play_sound(s_glow);
        //Change state used for the skip event
        state = 13;
    }
}


//Text 8 part 1
if(can_check_for_game) {
    if(!ds_list_empty(global.cart_id.queue_2)) {
        can_check_for_game = false;
        with text instance_destroy();
        text = scr_text("Perfect! Now the game is being prepared.", textx, texty, Pixel, c_black);
        alarm[0] = room_speed * 1.7;
        can_pickup_game = true;
        with(obj_cart) {
            image_index = 0;
            counter_left.item_num = 1;
        }
        //Change state used for the skip event
        state = 14;
        
        instance_create(x,y, obj_glow_delay);
    }
}

//Text 9 part 1
if(can_pickup_game) {
    if(global.player_id.hands[0] == 2) {
        can_pickup_game = false;
        with text instance_destroy();
        with text_previous1 instance_destroy();
        
        text = scr_text("Deliver the game to the table.", textx, texty, Pixel, c_black);
        can_deliver_game = true;
        with(obj_table_seated) image_index = 1;
        //Change state used for the skip event
        state = 16;
        
        scr_play_sound(s_glow);
    }
}

//Text 10 part 1
if(can_deliver_game) {
    if(global.player_id.hands[0] == 0) {
        with text instance_destroy(); 
        can_deliver_game = false;
        
        text = scr_text("Nice! Now just wait for the patron to", textx, texty, Pixel, c_black);
        alarm[1] = room_speed * 1.7;
        with(obj_table_seated) image_index = 0;
        //Change state used for the skip event
        state = 17;
    }
}


if(can_return_game) {
    if(global.player_id.hands[0] == 4) {
        can_return_game = false;
        with text instance_destroy(); 
        with text_previous1 instance_destroy();
        
        text = scr_text("Return the ID to the patron.", textx, texty, Pixel, c_black);
        can_return_id = true;
        with(obj_cart) image_index = 0;
        with(obj_table_seated) image_index = 1;
        
        //Change state used for the skip event
        state = 21;
        
        scr_play_sound(s_glow);
    }
}

if(can_return_id) {
    if(global.player_id.hands[0] == 0) {
        can_return_id = false;
        with text instance_destroy(); 
        with(obj_table_seated) image_index = 0;
        
        text = scr_text("Well done!", textx, texty, Pixel, c_black);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skip state in tutorial text

switch(state) {
    case 12:
        //Requires picking up ID
        break;
    case 13:
        //Requires ID delivery to cart
        break;
    case 14:
        alarm[0] = 1;
        break;
    case 15:
        //Requires picking up game at counter
        break;
    case 16:
        //Requires delivery of game to table
        break;
    case 17:
        alarm[1] = 1;
        break;
    case 18:
        //Requires patron to finish playing game
        break;
    case 19:
        alarm[3] = 1;
        break;
    case 20:
        //Requires player picking up finished game and deliver to cart
        break;
    case 21:
        //Requires player returning ID
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw text box, radio, sound waves


draw_sprite(spr_radio, 0, 250, 750);
draw_self();


//If the current text is being drawn
if(text) {
    if(text.is_drawing) { 
        played_end = false;
        //Audio for radio script
        scr_radio();
        //Makesure text counter is between 0-2
        if(radio_img_counter &gt; 6) radio_img_counter = 0;
        
        //Draw the subimages of the radio sound
        draw_sprite_ext(spr_radio_sound, floor(radio_img_counter), 250+60, 630, -1, 1, 0, c_white, 1);
        draw_sprite_ext(spr_radio_sound, floor(radio_img_counter), 250-60, 630, 1, 1, 0, c_white, 1);
        
        //Increment the text_counter
        radio_img_counter += 0.1;
    } else { 
        audio_stop_sound(current_radio_sound);
        if(!played_end) {
            scr_play_sound(s_end);
            played_end = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
